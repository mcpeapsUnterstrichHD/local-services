services:
  zoraxy:
    container_name: zoraxy-comboom.sucht
    image: zoraxydocker/zoraxy:latest
    pull_policy: always
    network_mode: host
    volumes:
      - ./zoraxy/config:/opt/zoraxy/config
      - ./zoraxy/assets:/opt/zoraxy/assets
      - ./zoraxy/plugin:/opt/zoraxy/plugin
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      FASTGEOIP: "true"
      PORT: 81
    restart: always
    labels:
      glance.name: zoraxy
      glance.icon: si:zoraxy
      glance.url: https://zoraxy.localhost
      glance.description: Zoraxy - Reverse proxy manager.
      glance.id: zoraxy
      glance.tags: "type:proxy, type:management, type:reverse, type:service, type:web, type:gui"
      glance.hide: false

  searxng:
    container_name: searxng-comboom.sucht
    image: searxng/searxng:latest
    pull_policy: always
    networks:
      local-services:
        ipv4_address: 192.168.1.3
    ports:
      - "8082:8080"
    volumes:
      - searxng-data:/etc/searxng:rw
      - ./searxng/settings.yml:/etc/searxng/settings.yml:rw
      - ./searxng/limiter.toml:/etc/searxng/limiter.toml:rw
    environment:
      - SEARXNG_BASE_URL=https://search.localhost
      - INSTANCE_NAME=comboom.sucht
    restart: always
    labels:
      glance.name: SearXNG
      glance.icon: si:searxng
      glance.url: https://search.localhost
      glance.description: Search engine
      glance.id: searxng
      glance.tags: "type:search, type:service, type:web, type:gui"
      glance.hide: false
  it-tools:
    container_name: it-tools-comboom.sucht
    image: ghcr.io/sharevb/it-tools:nightly
    pull_policy: always
    ports:
      - "8081:8080"
    environment:
      NODE_ENV: production
    networks:
      local-services:
        ipv4_address: 192.168.1.4
    restart: always
    labels:
      glance.name: IT Tools
      glance.icon: di:it-tools
      glance.url: https://it-tools.localhost
      glance.description: Collection of handy online tools for developers, with great UX.
      glance.id: it-tools
      glance.tags: "type:it,type:tools, type:service, type:web, type:gui"
      glance.hide: false
  stirling-pdf:
    container_name: stirling-pdf-comboom.sucht
    image: stirlingtools/stirling-pdf:latest-fat
    pull_policy: always
    ports:
      - '8080:8080'
    volumes:
      - ./pdf/trainingData:/usr/share/tessdata #Required for extra OCR languages
      - ./pdf/extraConfigs:/configs
      - ./pdf/customFiles:/customFiles/
      - ./pdf/logs:/logs/
    environment:
      - DOCKER_ENABLE_SECURITY=false
      - SERVER_HOSTNAME=stirling-pdf.localhost
    deploy:
      resources:
        limits:
          cpus: '4.0'
    networks:
      local-services:
        ipv4_address: 192.168.1.5
    restart: always
    labels:
      glance.name: Sirling PDF
      glance.icon: di:stirling-pdf
      glance.url: https://stirling-pdf.localhost
      glance.description: Local hosted web based PDF editor
      glance.id: stirling-pdf
      glance.tags: "type:pdf, type:conversion, type:service, type:web, type:gui"
      glance.hide: false
  portainer:
    container_name: portainer-comboom.sucht
    image: portainer/portainer-ce:latest
    #pull_policy: always
    ports:
            - '8083:9000'
            - '8084:9443'
            - '8000:8000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    restart: always
    networks:
      - local-services
    labels:
      glance.name: Portainer
      glance.icon: si:portainer
      glance.url: https://portainer.localhost
      glance.description: Docker management
      glance.id: portainer
      glance.tags: "type:docker, type:management, type:service, type:web, type:gui"
      glance.hide: false
  mariadb:
    image: mariadb:latest
    pull_policy: always
    container_name: mariadb-comboom.sucht
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=fabian66
      - MYSQL_INITDB_SKIP_TZINFO=1
    networks:
      local-services:
        ipv4_address: 192.168.1.6
    volumes:
      - ./all-databases.sql:/all-databases.sql
      - ./mariadb_data:/var/lib/mysql
    ports:
      - "3306:3306"
    labels:
      glance.name: MariaDB
      glance.icon: si:mariadb
      glance.description: Database
      glance.id: mariadb
      glance.parent: phpmyadmin
      glance.tags: "type:database"
      glance.hide: false

  phpmyadmin:
    pull_policy: always
    container_name: phpmyadmin-comboom.sucht
    links:
      - mariadb:db
    depends_on:
      - mariadb
    image: phpmyadmin
    restart: always
    ports:
      - 8085:80
    volumes:
      - ./phpmyadmin/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php
      - ./phpmyadmin/themes:/var/www/html/themes
    environment:
      - PMA_ARBITRARY=1
    networks:
      local-services:
        ipv4_address: 192.168.1.7
    labels:
      glance.name: phpMyAdmin
      glance.icon: si:phpmyadmin
      glance.url: https://phpmyadmin.localhost
      glance.description: Database management
      glance.id: phpmyadmin
      glance.tags: "type:web,type:database,type:gui"
      glance.hide: false
  glance:
    container_name: glance-comboom.sucht
    image: glanceapp/glance
    pull_policy: always
    network_mode: host
    restart: always
    volumes:
      - ./glance/config:/app/config
      - ./glance/assets:/app/assets
      # Optionally, also mount docker socket if you want to use the docker containers widget
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file: ./glance/.env
    labels:
      glance.name: Glance
      glance.description: Dashboard
      glance.id: glance
      glance.icon: di:glance
      glance.url: https://dashboard.localhost/home
      glance.tags: "type:web,type:dashboard"
      glance.hide: false

  postgres:
    container_name: postgres-comboom.sucht
    pull_policy: always
    networks:
      local-services:
        ipv4_address: 192.168.1.8
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: hedgedoc,authentik
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./postgres-init/multiple-dbs.sh:/docker-entrypoint-initdb.d/multiple-dbs.sh:ro
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d authentik -U postgres"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    labels:
      glance.name: PostgreSQL
      glance.icon: si:postgresql
      glance.description: Database
      glance.id: postgres
      glance.tags: "type:database"
      glance.hide: false
  hadgedoc:
    # Make sure to use the latest release from https://hedgedoc.org/latest-release
    image: quay.io/hedgedoc/hedgedoc:1.10.2
    container_name: hedgedoc-comboom.sucht
    environment:
      - CMD_DOMAIN=hedgedoc.localhost
      - CMD_PORT=8087
      - CMD_PROTOCOL_USESSL=false
      - CMD_URL_ADDPORT=false
      - CMD_EMAIL=true
      - CMD_ALLOW_EMAIL_REGISTER=true
      - CMD_SESSION_SECRET=ygjkhhgfgcev654ertzu6trdcb7t6r6dsrtb675vrb
      - CMD_DB_URL=postgres://postgres:postgres@postgres-comboom.sucht:5432/hedgedoc
    depends_on:
      - postgres
    volumes:
      - ./hedgedoc/public/uploads:/hedgedoc/public/uploads
    ports:
      - "8087:8087"
    restart: always
    networks:
      local-services:
        ipv4_address: 192.168.1.9
    labels:
      glance.name: HedgeDoc
      glance.icon: si:hedgedoc
      glance.url: https://hedgedoc.localhost
      glance.description: Collaborative markdown editor
      glance.id: hedgedoc
      glance.tags: "type:web,type:editor,type:service,type:gui"
      glance.hide: false
    pull_policy: always
  redis:
    image: redis:latest
    pull_policy: always
    container_name: redis-comboom.sucht
    restart: always
    volumes:
      - redis-data:/data
    networks:
      local-services:
        ipv4_address: 192.168.1.10
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    labels:
      glance.name: Redis
      glance.description: Redis
      glance.id: redis
      glance.icon: si:redis
      glance.tags: "type:cache,type:queue"
      glance.hide: false
  hbbs:
    container_name: hbbs-comboom.sucht
    image: rustdesk/rustdesk-server:latest
    pull_policy: always
    command: hbbs -r 192.168.1.13
    volumes:
      - ./rustdesk/data:/root
    networks:
      local-services:
        ipv4_address: 192.168.1.12
    ports:
      - "21114:21114"
      - "21115:21115"
      - "21116:21116"
      - "21118:21118"
    environment:
      - ALWAYS_USE_RELAY=Y
    depends_on:
      - hbbr
    restart: always
    labels:
      glance.name: RustDesk Server
      glance.description: RustDesk Server
      glance.id: rustdesk-server
      glance.icon: si:rustdesk
      glance.tags: "type:management,type:service,type:web,type:gui"
      glance.hide: false
  hbbr:
    container_name: hbbr-comboom.sucht
    image: rustdesk/rustdesk-server:latest
    pull_policy: always
    command: hbbr
    volumes:
      - ./rustdesk/data:/root
    networks:
      local-services:
        ipv4_address: 192.168.1.13
    restart: always
    ports:
      - "21117:21117"
      - "21119:21119"
    labels:
      glance.name: RustDesk Relay Server
      glance.description: RustDesk Relay Server
      glance.id: rustdesk-relay-server
      glance.icon: si:rustdesk
      glance.tags: "type:management,type:service,type:web,type:gui,type:relay"
      glance.hide: false
  server:
    image: ghcr.io/goauthentik/server
    restart: always
    pull_policy: always
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ik7CvVpcst7WtNzTmyQvJbd6RirMUZpZ7tsVeqvRMG9GTwM4fEHkpiXf81+6IjJ7atBFAuyyKTuf6sZO
      AUTHENTIK_REDIS__HOST: 192.168.1.10
      AUTHENTIK_POSTGRESQL__HOST: 192.168.1.8
      AUTHENTIK_POSTGRESQL__USER: postgres
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: postgres
    volumes:
      - ./authentik/media:/media
      - ./authentik/custom-templates:/templates
    network_mode: host
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      glance.name: Authentik Server
      glance.description: OAuth2 Auth Server
      glance.id: authentik-server
      glance.url: https://oauth2.localhost
      glance.icon: si:authentik
      glance.tags: "type:management,type:service,type:web,type:gui,type:auth"
      glance.hide: false
  worker:
    image: ghcr.io/goauthentik/server
    restart: always
    pull_policy: always
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ik7CvVpcst7WtNzTmyQvJbd6RirMUZpZ7tsVeqvRMG9GTwM4fEHkpiXf81+6IjJ7atBFAuyyKTuf6sZO
      AUTHENTIK_REDIS__HOST: 192.168.1.10
      AUTHENTIK_POSTGRESQL__HOST: 192.168.1.8
      AUTHENTIK_POSTGRESQL__USER: postgres
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: postgres
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./authentik/media:/media
      - ./authentik/certs:/certs
      - ./authentik/custom-templates:/templates
    network_mode: host
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      glance.name: Authentik Worker Server
      glance.description: OAuth2 Auth Worker Server
      glance.id: authentik-worker
      glance.url: https://oauth2.localhost
      glance.icon: si:authentik
      glance.tags: "type:management,type:service,type:web,type:gui,type:auth"
      glance.hide: false
  wordpress:
    image: bitnami/wordpress
    volumes:
      - ./wordpress-data:/bitnami/wordpress
    environment:
      WORDPRESS_DATABASE_HOST: mariadb-comboom.sucht
      WORDPRESS_DATABASE_PORT_NUMBER: 3306
      WORDPRESS_DATABASE_NAME: wordpress_db
      WORDPRESS_DATABASE_USER: wordpress
      WORDPRESS_DATABASE_PASSWORD: wordpress
      WORDPRESS_TABLE_PREFIX: wordpress_db
      WORDPRESS_BLOG_NAME: comboom.sucht
      WORDPRESS_FIRST_NAME: mcpeaps_HD
      WORDPRESS_LAST_NAME: MAHD
      WORDPRESS_USERNAME: mahd
      WORDPRESS_PASSWORD: fabian66
      WORDPRESS_EMAIL: mcpeaps_HD@outlook.com
      #WORDPRESS_SMTP_HOST: ${WORDPRESS_SMTP_ADDRESS}
      #WORDPRESS_SMTP_PORT: ${WORDPRESS_SMTP_PORT}
      #WORDPRESS_SMTP_USER: ${WORDPRESS_SMTP_USER_NAME}
      #WORDPRESS_SMTP_PASSWORD: ${WORDPRESS_SMTP_PASSWORD}
    networks:
      local-services:
        ipv4_address: 192.168.1.14
    ports:
      - "8089:8080"
      - "8090:8443"
    restart: always
    pull_policy: always
    depends_on:
      - mariadb
  kroki:
    image: yuzutech/kroki
    container_name: kroki-comboom.sucht
    pull_policy: always
    restart: always
    depends_on:
      - kroki-mermaid
      - kroki-bpmn
      - kroki-excalidraw
      - kroki-drawio
    environment:
      - KROKI_MERMAID_HOST=kroki-mermaid
      - KROKI_BPMN_HOST=kroki-bpmn
      - KROKI_EXCALIDRAW_HOST=kroki-excalidraw
      - KROKI_DIAGRAMSNET_HOST=kroki-drawio
    ports:
      - "8091:8000"
    # If you do need to explicitly mount /tmp, make sure to include the exec option
    tmpfs:
      - /tmp:exec
    networks:
      local-services:
        ipv4_address: 192.168.1.15
  kroki-mermaid:
    image: yuzutech/kroki-mermaid
    container_name: kroki-mermaid-comboom.sucht
    pull_policy: always
    restart: always
    expose:
      - "8002"
    networks:
      local-services:
        ipv4_address: 192.168.1.16
  kroki-bpmn:
    image: yuzutech/kroki-bpmn
    container_name: kroki-bpmn-comboom.sucht
    pull_policy: always
    restart: always
    expose:
      - "8003"
  kroki-excalidraw:
    image: yuzutech/kroki-excalidraw:latest
    container_name: kroki-excalidraw-comboom.sucht
    restart: always
    pull_policy: always
    networks:
      local-services:
        ipv4_address: 192.168.1.17
    expose:
      - "8004"
  kroki-drawio:
    image: yuzutech/kroki-diagramsnet
    container_name: kroki-drawio-comboom.sucht
    restart: always
    pull_policy: always
    networks:
      local-services:
        ipv4_address: 192.168.1.18
    expose:
      - "8005"
  excalidraw:
    image: excalidraw/excalidraw:latest
    container_name: excalidraw-comboom.sucht
    restart: always
    pull_policy: always
    networks:
      local-services:
        ipv4_address: 192.168.1.19
    ports:
      - "8092:80"
    environment:
      - COLLAB_SERVER_URL=wss://excalidraw-room
    labels:
      glance.name: Excalidraw Editor
      glance.description: Excalidraw is a whiteboard tool that lets you easily sketch diagrams that have a hand-drawn feel to them.
      glance.id: excalidraw
      glance.url: https://excalidraw.localhost
      glance.icon: si:excalidraw
      glance.tags: "type:service,type:web,type:gui"
      glance.hide: false
  excalidraw-room:
    image: excalidraw/excalidraw-room:latest
    container_name: excalidraw-room-localhost
    restart: always
    pull_policy: always
    networks:
      local-services:
        ipv4_address: 192.168.1.20
    ports:
      - "8093:80"
    labels:
      glance.name: Excalidraw Room
      glance.description: Excalidraw is a whiteboard tool that lets you easily sketch diagrams that have a hand-drawn feel to them.
      glance.id: excalidraw-room
      glance.url: https://kroki.localhost/excalidraw
      glance.icon: si:excalidraw
      glance.tags: "type:service,type:web,type:gui"
      glance.hide: false
  drawio:
    image: jgraph/drawio
    container_name: drawio-comboom.sucht
    restart: always
    pull_policy: always
    networks:
      local-services:
        ipv4_address: 192.168.1.21
    ports:
      - "8094:8080"
    labels:
      glance.name: Draw.io
      glance.description: Draw.io is a JavaScript, client-side editor for general diagramming.
      glance.id: drawio
      glance.url: https://drawio.localhost
      glance.icon: di:drawio
      glance.tags: "type:service,type:web,type:gui"
      glance.hide: false
  plantuml:
    image: plantuml/plantuml-server:latest
    container_name: plantuml-comboom.sucht
    pull_policy: always
    restart: always
    networks:
      local-services:
        ipv4_address: 192.168.1.22
    ports:
      - "8097:8080"
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    pull_policy: always
    container_name: code-server-comboom.sucht
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - PASSWORD=fabian66 #optional
      - SUDO_PASSWORD=fabian66 #optional
      - PROXY_DOMAIN=code-server.localhost #optional
      - DEFAULT_WORKSPACE=/DEV #optional
      - PWA_APPNAME=code-server-comboom.sucht #optional
      - DOCKER_MODS=linuxserver/mods:universal-docker|linuxserver/mods:code-server-npmglobal|linuxserver/mods:code-server-nodejs|linuxserver/mods:code-server-java11|linuxserver/mods:code-server-extension-arguments|inuxserver/mods:code-server-nvm|linuxserver/mods:code-server-python3|linuxserver/mods:code-server-rust|linuxserver/mods:code-server-zsh
      - VSCODE_EXTENSION_IDS=comboompunktsucht.vsc-comboom-sucht-nordic
    volumes:
      - ./code-server/config:/config
      - $HOME/DEV:/DEV
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime
    ports:
      - "8098:8443"
    restart: always
    networks:
      local-services:
        ipv4_address: 192.168.1.23



networks:
  local-services:
    ipam:
      driver: default
      config:
        - subnet: 192.168.1.0/24
          gateway: 192.168.1.2
          ip_range: 192.168.1.0/24

volumes:
  caddy-data:
  caddy-config:
  redis-data:
  searxng-data:
  portainer-data:
  mariadb-data:
  postgresql_data: